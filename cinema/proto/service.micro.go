// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cinema service

type CinemaService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Occupy(ctx context.Context, in *OccupiedRequest, opts ...client.CallOption) (*OccupiedResponse, error)
	Free(ctx context.Context, in *OccupiedRequest, opts ...client.CallOption) (*OccupiedResponse, error)
	AreAvailable(ctx context.Context, in *AvailableRequest, opts ...client.CallOption) (*AvailableResponse, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Occupy(ctx context.Context, in *OccupiedRequest, opts ...client.CallOption) (*OccupiedResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Occupy", in)
	out := new(OccupiedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Free(ctx context.Context, in *OccupiedRequest, opts ...client.CallOption) (*OccupiedResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Free", in)
	out := new(OccupiedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) AreAvailable(ctx context.Context, in *AvailableRequest, opts ...client.CallOption) (*AvailableResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.AreAvailable", in)
	out := new(AvailableResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Occupy(context.Context, *OccupiedRequest, *OccupiedResponse) error
	Free(context.Context, *OccupiedRequest, *OccupiedResponse) error
	AreAvailable(context.Context, *AvailableRequest, *AvailableResponse) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Occupy(ctx context.Context, in *OccupiedRequest, out *OccupiedResponse) error
		Free(ctx context.Context, in *OccupiedRequest, out *OccupiedResponse) error
		AreAvailable(ctx context.Context, in *AvailableRequest, out *AvailableResponse) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.CinemaHandler.Create(ctx, in, out)
}

func (h *cinemaHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.CinemaHandler.Delete(ctx, in, out)
}

func (h *cinemaHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.CinemaHandler.Read(ctx, in, out)
}

func (h *cinemaHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.CinemaHandler.List(ctx, in, out)
}

func (h *cinemaHandler) Occupy(ctx context.Context, in *OccupiedRequest, out *OccupiedResponse) error {
	return h.CinemaHandler.Occupy(ctx, in, out)
}

func (h *cinemaHandler) Free(ctx context.Context, in *OccupiedRequest, out *OccupiedResponse) error {
	return h.CinemaHandler.Free(ctx, in, out)
}

func (h *cinemaHandler) AreAvailable(ctx context.Context, in *AvailableRequest, out *AvailableResponse) error {
	return h.CinemaHandler.AreAvailable(ctx, in, out)
}
